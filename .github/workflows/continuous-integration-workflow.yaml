name: Cargo Build

on:
  push:
    branches:
      - master

jobs:
  build-windows:
    name: Windows
    env:
        LIBRARY: Skia
        RUST_BACKTRACE: full
    runs-on: ${{ matrix.variant.os }}
    strategy:
      matrix:
        variant:
          - os: windows-latest
            prefix: ''
            extension: .dll
            platform: windows
            features: skia_windows
    steps:
      - name: Support longpaths
        if: matrix.variant.os == 'windows-latest'
        run: |
          git config --system core.autocrlf true
          git config --system core.longpaths true
          git config --global core.longpaths true
      - name: Check LongPathsEnabled
        run: |
          (Get-ItemProperty "HKLM:System\CurrentControlSet\Control\FileSystem").LongPathsEnabled

      - name: Where VS is already installed
        run: |
          Get-ChildItem "C:\\Program Files (x86)\\Microsoft Visual Studio\2019" | Sort-Object -Property LastWriteTime
      - name: Install visual studio build tools
        run: choco install visualstudio2019buildtools-preview --pre --package-parameters "--allWorkloads --includeRecommended --includeOptional --passive --locale en-US" --ignore-detected-reboot --ignore-package-exit-codes
      - name: Where New VS is installed
        run: |
          Get-ChildItem "C:\\Program Files (x86)\\Microsoft Visual Studio\2019" | Sort-Object -Property LastWriteTime
      - name: Add VS to path
        run: |
          echo "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview" >> $env:GITHUB_PATH
      - name: Set up python 2
        uses: actions/setup-python@v1
        with:
          python-version: '2.x'
      - name: Install dependencies
        run: choco install llvm
      - uses: actions/checkout@master

      - name: Update certificates
        if: matrix.variant.os == 'windows-latest'
        run: ./scripts/install_certificate.ps1
        shell: powershell
      
      - name: Test certificates
        if: startsWith(matrix.variant.os,'windows')
        run: python ./scripts/test_certificate.py

      - name: Install Rust stable
        run: choco install rustup.install --ignore-checksums
      
      - name: Set CARGO_HOME	
        run: |
          echo "CARGO_HOME=$env:GITHUB_WORKSPACE" >> $env:GITHUB_ENV
      - uses: FranzDiebold/github-env-vars-action@v2
      - name: Print environment variables
        run: |
          echo "CARGO_HOME=$env:CARGO_HOME"
          echo "GITHUB_WORKSPACE=$env:GITHUB_WORKSPACE"
      - name: Run cargo build
        run: cargo build --release --features ${{matrix.variant.features}}
        shell: powershell
        
      - name: Deploy
        uses: garygrossgarten/github-action-scp@release
        with:
          local: target/release/${{matrix.variant.prefix}}${{env.LIBRARY}}${{matrix.variant.extension}}
          remote: /var/www/html/${{env.LIBRARY}}/${{matrix.variant.platform}}/development/x86_64/lib${{env.LIBRARY}}${{matrix.variant.extension}}
          host: ${{ secrets.FEENK_CLOUD }}
          username: ubuntu
          privateKey: ${{ secrets.SSH_KEY }}

  build-unixes:
    name: Linux, MacOSX
    env:
        LIBRARY: Skia
        RUST_BACKTRACE: full
    runs-on: ${{ matrix.variant.os }}
    strategy:
      matrix:
        variant:
          - os: ubuntu-latest
            prefix: lib
            extension: .so
            platform: linux
            features: skia_linux
            distro: bionic
            clang: 10
            gcc: 9
          - os: macos-latest
            prefix: lib
            extension: .dylib
            platform: osx
            features: skia_mac
    steps:
      - name: Install dependencies (Linux)
        if: startsWith(matrix.variant.os,'ubuntu')
        run: |
          sudo apt-get update
          sudo apt install pkg-config libssl-dev libgl1-mesa-dev libfontconfig1-dev
      - name: Update clang (Linux)
        if: ${{ true && startsWith(matrix.variant.os,'ubuntu') }}
        run: |
          sudo apt autoremove clang-8 clang-9
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo apt-add-repository "deb http://apt.llvm.org/${{matrix.variant.distro}}/ llvm-toolchain-${{matrix.variant.distro}}-${{matrix.variant.clang}} main"
          sudo apt update
          sudo apt install clang-${{matrix.variant.clang}}
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${{matrix.variant.clang}} 120
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${{matrix.variant.clang}} 120
          sudo update-alternatives --config clang
      - name: Update gcc (Linux)
        if: ${{ false && startsWith(matrix.variant.os,'ubuntu') }}
        run: |
          sudo apt-get autoremove g++ gcc
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt update
          sudo apt install gcc-snapshot -y
          sudo apt update
          sudo apt install gcc-${{matrix.variant.gcc}} g++-${{matrix.variant.gcc}}
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{matrix.variant.gcc}} 120
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{matrix.variant.gcc}} 120
          sudo update-alternatives --config g++
          sudo update-alternatives --config gcc
      - name: Check versions (Linux)
        if: ${{ true && startsWith(matrix.variant.os,'ubuntu') }}
        run: |
          whereis clang
          whereis gcc
          clang --version
          gcc --version
          strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX
      - name: Use latest Xcode (MacOS)
        if: startsWith(matrix.variant.os,'macos')
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - name: Install dependencies (MacOS)
        if: startsWith(matrix.variant.os,'macos')
        run: |
          brew uninstall llvm

      - uses: actions/checkout@master
  
      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features ${{matrix.variant.features}}
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.9
      
      - name: Deploy
        uses: garygrossgarten/github-action-scp@release
        with:
          local: target/release/${{matrix.variant.prefix}}${{env.LIBRARY}}${{matrix.variant.extension}}
          remote: /var/www/html/${{env.LIBRARY}}/${{matrix.variant.platform}}/development/x86_64/lib${{env.LIBRARY}}${{matrix.variant.extension}}
          host: ${{ secrets.FEENK_CLOUD }}
          username: ubuntu
          privateKey: ${{ secrets.SSH_KEY }}
